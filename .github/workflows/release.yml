name: Release Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js for npm pack
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag_name }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        # Remove 'v' prefix if present
        VERSION=${VERSION#v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG_NAME=${{ github.event.inputs.tag_name || github.ref_name }}" >> $GITHUB_OUTPUT
    
    - name: Update package.json version
      run: |
        cd Assets/uMcp
        # Update version in package.json
        jq --arg version "${{ steps.get_version.outputs.VERSION }}" '.version = $version' package.json > package.json.tmp
        mv package.json.tmp package.json
        
    - name: Create package archive
      run: |
        # Create the standard package tgz for Assets folder (backward compatibility)
        tar -czf com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}.tgz -C Assets uMcp/
        
        # Create UPM package using npm pack (Unity recommended method)
        cd Assets/uMcp
        echo "Files in source package:"
        ls -la
        
        # Verify package.json exists and is valid
        if [ -f package.json ]; then
            echo "package.json found and verified:"
            cat package.json | head -10
            
            # Use npm pack to create Unity-compatible tgz
            echo "Creating UPM package with npm pack..."
            npm pack --pack-destination ../..
            
            # List created files
            cd ../..
            echo "npm pack created files:"
            ls -la *.tgz
            
            # Rename npm pack output to expected filename
            NPM_PACK_FILE=$(ls com.yoshi32a.unity-mcp-server-*.tgz 2>/dev/null | head -1 || echo "")
            if [ -n "$NPM_PACK_FILE" ]; then
                mv "$NPM_PACK_FILE" "com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}-upm.tgz"
                echo "Renamed $NPM_PACK_FILE to com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}-upm.tgz"
            else
                echo "ERROR: npm pack failed to create tgz file!"
                exit 1
            fi
            
            # Debug: Check the structure of created tgz
            echo "Checking UPM package structure:"
            tar -tzf com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}-upm.tgz | head -20
        else
            echo "ERROR: package.json not found!"
            exit 1
        fi
        
    - name: Extract changelog entry
      id: changelog
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        CHANGELOG_FILE="Assets/uMcp/CHANGELOG.md"
        
        # Extract the specific version changelog entry
        if [ -f "$CHANGELOG_FILE" ]; then
          # Get content between version headers
          awk -v version="$VERSION" '
            /^## \[/ { 
              if (found) exit
              if ($0 ~ "\\[" version "\\]") { found=1; next }
              next
            }
            found && /^## \[/ { exit }
            found { print }
          ' "$CHANGELOG_FILE" > version_changelog.md
          
          # Check if we found content
          if [ -s version_changelog.md ]; then
            echo "Found changelog entry for v$VERSION"
          else
            echo "No specific changelog entry found for v$VERSION, using generic content"
            echo "詳細な変更内容については [CHANGELOG.md](Assets/uMcp/CHANGELOG.md) をご覧ください。" > version_changelog.md
          fi
        else
          echo "CHANGELOG.md not found"
          echo "詳細な変更内容については [CHANGELOG.md](Assets/uMcp/CHANGELOG.md) をご覧ください。" > version_changelog.md
        fi

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        TAG_NAME="${{ steps.get_version.outputs.TAG_NAME }}"
        
        cat << EOF > release_notes.md
        # Unity MCP Server v$VERSION
        
        $(cat version_changelog.md)
        
        ## 📦 インストール方法
        
        ### 方法1: 手動インストール
        1. \`com.umcp.unity-mcp-server-$VERSION.tgz\` をダウンロード
        2. Unity プロジェクトの \`Assets\` フォルダに展開
        
        ### 方法2: Unity Package Manager (ローカル)
        1. \`com.umcp.unity-mcp-server-$VERSION-upm.tgz\` をダウンロード
        2. Unity プロジェクトの \`Packages\` フォルダに展開
        
        ### 方法3: Unity Package Manager (直接)
        1. \`com.umcp.unity-mcp-server-$VERSION-upm.tgz\` を任意の場所にダウンロード
        2. Unity でPackage Manager を開く
        3. "+" → "Add package from tarball..." をクリック
        4. ダウンロードした .tgz ファイルを選択
        
        ### 方法4: Git URL（推奨）
        Package Manager で以下のURLを追加:
        \`\`\`
        https://github.com/${{ github.repository }}.git?path=Assets/uMcp#$TAG_NAME
        \`\`\`
        
        ## 📋 動作要件
        - Unity 2022.3 LTS 以降
        - UniTask 2.3.3 以降
        
        ## 🚀 主要機能
        - **25個のビルトインツール**: Unity情報、アセット管理、ビルド管理、コンソールログ、テスト実行、ドキュメント検索、ワークフロー、エディタ拡張
        - **Markdownワークフローシステム**: コンテキスト対応のインテリジェントなアクション提案
        - **エディター統合**: 自動起動機能付きのシームレスなUnity Editor統合
        - **非同期サポート**: ノンブロッキング操作のための完全なUniTask統合
        
        ## 🛠️ 使用開始方法
        1. 上記のいずれかの方法でパッケージをインストール
        2. Unity Editor を開く
        3. \`Tools > uMCP > Create Default Tool Assets\` に移動
        4. MCPサーバーが \`http://localhost:49001/umcp/\` で自動開始
        
        ## 📖 詳細情報
        - [完全ドキュメント](https://github.com/${{ github.repository }}/blob/$TAG_NAME/Assets/uMcp/README.md)
        - [変更履歴](https://github.com/${{ github.repository }}/blob/$TAG_NAME/Assets/uMcp/CHANGELOG.md)
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.TAG_NAME }}
        name: Unity MCP Server v${{ steps.get_version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}.tgz
          com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}-upm.tgz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}