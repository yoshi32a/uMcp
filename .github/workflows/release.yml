name: Release Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js for npm pack
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag_name }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        # Remove 'v' prefix if present
        VERSION=${VERSION#v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG_NAME=${{ github.event.inputs.tag_name || github.ref_name }}" >> $GITHUB_OUTPUT
    
    - name: Update package.json version
      run: |
        cd Assets/uMcp
        # Update version in package.json
        jq --arg version "${{ steps.get_version.outputs.VERSION }}" '.version = $version' package.json > package.json.tmp
        mv package.json.tmp package.json
        
    - name: Create package archive
      run: |
        # Create the standard package tgz for Assets folder (backward compatibility)
        tar -czf com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}.tgz -C Assets uMcp/
        
        # Create UPM package using npm pack (Unity recommended method)
        cd Assets/uMcp
        echo "Files in source package:"
        ls -la
        
        # Verify package.json exists and is valid
        if [ -f package.json ]; then
            echo "package.json found and verified:"
            cat package.json | head -10
            
            # Use npm pack to create Unity-compatible tgz
            echo "Creating UPM package with npm pack..."
            npm pack --pack-destination ../..
            
            # List created files
            cd ../..
            echo "npm pack created files:"
            ls -la *.tgz
            
            # Rename npm pack output to expected filename
            NPM_PACK_FILE=$(ls com.yoshi32a.unity-mcp-server-*.tgz 2>/dev/null | head -1 || echo "")
            if [ -n "$NPM_PACK_FILE" ]; then
                mv "$NPM_PACK_FILE" "com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}-upm.tgz"
                echo "Renamed $NPM_PACK_FILE to com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}-upm.tgz"
            else
                echo "ERROR: npm pack failed to create tgz file!"
                exit 1
            fi
            
            # Debug: Check the structure of created tgz
            echo "Checking UPM package structure:"
            tar -tzf com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}-upm.tgz | head -20
        else
            echo "ERROR: package.json not found!"
            exit 1
        fi
        
    - name: Generate release notes
      id: release_notes
      run: |
        cat << EOF > release_notes.md
        # Unity MCP Server v${{ steps.get_version.outputs.VERSION }}
        
        ## Installation
        
        ### Method 1: Manual Installation
        1. Download \`com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}.tgz\`
        2. Extract to your Unity project's \`Assets\` folder
        
        ### Method 2: Unity Package Manager (Local)
        1. Download \`com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}-upm.tgz\`
        2. Extract to your Unity project's \`Packages\` folder
        
        ### Method 3: Unity Package Manager (Direct)
        1. Download \`com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}-upm.tgz\` to any location
        2. In Unity, open Package Manager
        3. Click "+" â†’ "Add package from tarball..."
        4. Select the downloaded .tgz file
        
        ### Method 4: Git URL
        Add the following to your \`manifest.json\`:
        \`\`\`json
        "com.umcp.unity-mcp-server": "https://github.com/${{ github.repository }}.git#${{ steps.get_version.outputs.TAG_NAME }}"
        \`\`\`
        
        ## Requirements
        - Unity 2022.3 LTS or higher
        - UniTask 2.3.3 or higher
        
        ## What's New
        See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/${{ steps.get_version.outputs.TAG_NAME }}/Assets/uMcp/CHANGELOG.md) for details.
        
        ## Features
        - 21 built-in MCP tools
        - Markdown-based workflow system
        - Intelligent action suggestions
        - Unity Editor integration
        - Async/await support with UniTask
        
        ## Getting Started
        1. Install the package using one of the methods above
        2. Open Unity Editor
        3. Go to \`Tools > uMCP > Create Default Tool Assets\`
        4. The MCP server will start automatically at \`http://localhost:49001/umcp/\`
        
        For more information, see the [README](https://github.com/${{ github.repository }}/blob/${{ steps.get_version.outputs.TAG_NAME }}/Assets/uMcp/README.md).
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.TAG_NAME }}
        name: Unity MCP Server v${{ steps.get_version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}.tgz
          com.umcp.unity-mcp-server-${{ steps.get_version.outputs.VERSION }}-upm.tgz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}